{"version":3,"sources":["constants/index.js","components/card.jsx","services/index.js","components/gameboard.jsx","components/popup.jsx","App.js","reportWebVitals.js","index.js"],"names":["GAME_STATUS","CARD_STATUS","Card","data","click","index","useState","isLoaded","setIsLoaded","id","url","status","isSelected","isMatched","className","onClick","src","alt","onLoad","BASE_URL","fetchChamps","a","fetch","res","json","dataRaw","champions","Object","keys","fetchImages","champion","apiUrl","blob","image","outsider","URL","createObjectURL","getRandomUrl","arrayUrl","imageSet","Set","champList","size","Math","ceil","DECK_SIZE","i","floor","random","length","champ","imgChamp","has","add","push","gameService","urls","deck","concat","pop","shuffledDeck","sort","GameBoard","gameStatus","onGameUpdate","setDeck","isChecking","setIsChecking","firstCard","setFirstCard","secondCard","setSecondCard","faceUpCounter","setFaceUpCounter","flipCounter","useRef","startTime","setStartTime","checkPair","useCallback","first","second","newDeck","setTimeout","handleClick","current","newCount","newCard","toggleCard","flipAllCards","prevDeck","lastCard","find","key","remainder","checkGameFinished","console","log","filter","flips","time","Date","initializeGame","GameService","useEffect","entries","map","value","Popup","props","results","onReset","App","setGameStatus","gameResults","setGameResults","handleStatusUpdate","newStatus","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QAIaA,G,MAEE,eAFFA,EAGF,UAHEA,EAID,WAJCA,EAOD,WAGCC,EAED,WAFCA,EAGF,UAHEA,EAIH,S,0DCOKC,EArBF,SAAC,GACb,IADcC,EACf,EADeA,KAAKC,EACpB,EADoBA,MAAMC,EAC1B,EAD0BA,MAC1B,EACoCC,oBAAS,GAD7C,mBACWC,EADX,KACqBC,EADrB,KAEWC,EAAoBN,EAApBM,GAAKC,EAAeP,EAAfO,IAAKC,EAAUR,EAAVQ,OACXC,EAAaD,IAAWV,EACxBY,EAAYF,IAAWV,EAO7B,OACA,sBAAKa,UAAS,eAAUF,EAAW,WAAW,GAAhC,YAAsCC,EAAU,UAAU,IAAME,QAP1D,WAEbJ,IAAWV,GAAoBG,EAAMC,EAAQI,IAKpD,UACI,qBAAKK,UAAU,QAAf,SACI,qBAAKE,IAAKN,EAAKO,IAAI,WAAWC,OALd,kBAAMV,GAAY,QAOtC,qBAAKM,UAAU,OAAf,UAAwBP,GAAY,gBClBtCY,EAAW,gE,SAWFC,I,2EAAf,gCAAAC,EAAA,sEAEsBC,MAAM,2EAF5B,cAEUC,EAFV,gBAG0BA,EAAIC,OAH9B,cAGUC,EAHV,OAIUC,EAAYC,OAAOC,KAAKH,EAAQtB,MAJ1C,kBAKWuB,GALX,4C,+BAOeG,E,8EAAf,WAA2BC,GAA3B,qBAAAT,EAAA,6DAEUU,EAFV,UAEsBZ,GAFtB,OAEiCW,EAFjC,mBAGsBR,MAAMS,GAH5B,cAGUR,EAHV,gBAIwBA,EAAIS,OAJ5B,cAIUC,EAJV,OAKUC,EAAWC,IAAIC,gBAAgBH,GALzC,kBAMWC,GANX,4C,+BAQeG,I,2EAAf,sCAAAhB,EAAA,6DAEUiB,EAAW,GACXC,EAAW,IAAIC,IAHzB,SAI4BpB,IAJ5B,OAIUqB,EAJV,mBAKWF,EAASG,KAAOC,KAAKC,KAAKC,MALrC,oBAOcC,EAAIH,KAAKI,MAAOJ,KAAKK,SAAWP,EAAUQ,QAAU,GACtDR,EAAUK,GARtB,wBAUkBI,EAAQT,EAAUK,GAVpC,UAWmCjB,EAAYqB,GAX/C,QAWkBC,EAXlB,OAYiBZ,EAASa,IAAIF,KAEdX,EAASc,IAAIH,GACbZ,EAASgB,KACL,CACI7C,GAAIyC,EACJxC,IAAKyC,EACLxC,OAAQV,KAnBhC,wDAwBWqC,GAxBX,6C,sBA2BeiB,MAnDE,uCAAG,gCAAAlC,EAAA,sEAEGgB,IAFH,OAIhB,IAFMmB,EAFU,OAGVC,EAAOD,EAAKE,OAAOF,GAClBC,EAAKR,OFRS,IEQWQ,EAAKE,MAJrB,OAKVC,EAAeH,EAAKI,MAAM,iBAAM,GAAMlB,KAAKK,YALjC,kBAMTY,GANS,2CAAH,qDCqKFE,EAlKG,SAAC,GAClB,IADmBC,EACpB,EADoBA,WAAWC,EAC/B,EAD+BA,aAC/B,EAC4B1D,mBAAS,IADrC,mBACWmD,EADX,KACiBQ,EADjB,OAEwC3D,oBAAS,GAFjD,mBAEW4D,EAFX,KAEuBC,EAFvB,OAGsC7D,mBAAS,MAH/C,mBAGW8D,EAHX,KAGsBC,EAHtB,OAIwC/D,mBAAS,MAJjD,mBAIWgE,EAJX,KAIuBC,EAJvB,OAK8CjE,mBAAS,GALvD,mBAKWkE,EALX,KAK0BC,EAL1B,KAOUC,EAAcC,iBAAO,GAP/B,EAQsCrE,mBAAS,MAR/C,mBAQWsE,EARX,KAQsBC,EARtB,KAgBUC,EAAYC,uBAAY,WAE1B,GAAGX,GAAaE,EAChB,CAAC,IAAD,EACUU,EAAK,eAAQvB,EAAKW,EAAU/D,QAC5B4E,EAAM,eAAQxB,EAAKa,EAAWjE,QAEhC+D,EAAU3D,KAAO6D,EAAW7D,IAE5BuE,EAAMrE,OAASV,EACfgF,EAAOtE,OAASV,IAIhB+E,EAAMrE,OAASV,EACfgF,EAAOtE,OAASV,GAEpB,IAAMiF,EAAO,2BAENzB,GAFM,uBAGRW,EAAU/D,MAAO2E,GAHT,cAIRV,EAAWjE,MAAO4E,GAJV,IAObE,YAAY,kBAAMlB,EAAQiB,KA3CxB,KA4CFC,YAAY,kBA7BhBd,EAAa,MACbE,EAAc,WACdJ,GAAc,KAjBR,QA+CP,CAACV,EAAMW,EAAWE,IAWfc,EAAc,SAAC/E,EAAOI,GAExB,GAAGyD,EAAW,OAAO,EAGrB,GADAQ,EAAYW,UACTb,EAAgB,EACnB,CACI,IAAMc,EAAWd,EAAgB,EAC3Be,EAAU,CAAClF,QAAOI,MACxBgE,EAAiBa,GAED,IAAbA,EAECjB,EAAakB,IAIbhB,EAAcgB,GACdpB,GAAc,IA3BP,SAAC9D,EAAOM,GAEvB,IAAMuE,EAAO,eAAOzB,GACd8B,EAAO,eAAOL,EAAQ7E,IAC5BkF,EAAQ5E,OAASA,EAEjBuE,EAAQ7E,GAASkF,EACjBtB,EAAQiB,GAsBJM,CAAWnF,EAAOJ,KAGpBwF,EAAeV,uBAAY,WAE7Bd,GAAQ,SAACyB,GAEP,IAAMC,EAAWhE,OAAOC,KAAK6B,GAAMmC,MAAK,SAACC,GAAD,OAASpC,EAAKoC,GAAKlF,SAAWV,KACtE,GAAI0F,EACJ,CACE,IAAMG,EAAS,2BAAQrC,EAAKkC,IAAb,IAAwBhF,OAAQV,IAO/C,OALa,2BAERwD,GAFQ,kBAGVkC,EAAWG,IAIhB,OAAOJ,OAER,CAACjC,IAIFsC,EAAoBhB,uBAAY,YAEpCiB,QAAQC,IAAIvB,EAAYW,SACF,IAAlBb,GAIqB3B,KAFPlB,OAAOC,KAAK6B,GAAMyC,QAAO,SAACL,GAAD,OAASpC,EAAKoC,GAAKlF,SAAWV,KAE3DgD,QAEVe,EAAahE,EACb,CACEmG,MAAOzB,EAAYW,QACnBe,KAAK,GAAD,QAAM,IAAIC,KAASzB,GAAa,IAAhC,cAIiB,IAAlBJ,IAEPC,EAAiB,GACjBK,OAED,CAACA,EAAWrB,EAAMe,EAAeR,EAAcY,IAE5C0B,EAAiBvB,sBAAW,sBAAC,sBAAA1D,EAAA,6DAEjC2C,EAAahE,GAFoB,KAGjCiE,EAHiC,SAGnBsC,IAHmB,kCAIjC7B,EAAYW,QAAU,EACtBR,EAAa,IAAIwB,MACjBrC,EAAahE,GANoB,2CAOhC,CAACgE,IAaJ,OAZAwC,qBAAU,WACRR,QAAQC,IAAIlC,GAERA,IAAe/D,EACjBsG,IACSvC,IAAe/D,EACxB+F,IACShC,IAAe/D,GAExByF,MAED,CAACM,EAAmBO,EAAgBb,EAAc1B,IAEnD,qBAAKjD,UAAU,QAAf,SACGiD,IAAe/D,EACZ,aACA2B,OAAO8E,QAAQhD,GAAMiD,KAAI,YAAmB,IAAD,mBAAhBb,EAAgB,KAAXc,EAAW,KACzC,OACE,cAAC,EAAD,CAEEtG,MAAOwF,EACP1F,KAAMwG,EACNvG,MAAOgF,GAHFS,SCjINe,G,MA1BD,SAACC,GAOb,OACE,sBAAK/F,UAAU,OAAf,UACE,wEACA,gCACE,gCACE,+CACC+F,EAAMC,QAAQX,MAFjB,YAIA,gCACE,4CADF,IACsBU,EAAMC,QAAQV,WAGtC,wBAAQtF,UAAU,SAASC,QAjBX,WAElB8F,EAAME,QAAQ/G,IAeZ,6BCgBSgH,MAjCf,WACC,IAAD,EAEsC1G,mBAASN,GAF/C,mBAES+D,EAFT,KAEqBkD,EAFrB,OAGwC3G,mBAAS,IAHjD,mBAGS4G,EAHT,KAGsBC,EAHtB,KAKQC,EAAqB,SAACC,EAAWP,GAErCG,EAAcI,GACVA,IAAcrH,GAEhBmH,EAAeL,IAInB,OACA,sBAAKhG,UAAU,MAAf,UACI,wBAAQA,UAAU,SAAlB,SACE,oBAAIA,UAAU,eAAd,gCAEF,gCACE,cAAC,EAAD,CAAWiD,WAAYA,EAAYC,aAAcoD,IAChDrD,IAAe/D,GAAyB,cAAC,EAAD,CAAO+G,QAASK,EAAoBN,QAASI,OAExF,yBAAQpG,UAAU,SAAlB,sCAEE,uBAFF,0BAGyB,mBAAGwG,KAAK,6BAAR,2BCrBhBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.65452fc4.chunk.js","sourcesContent":["export const CARD_SIZES = { width: 150, height: 233 };\r\nexport const DECK_SIZE = 15;\r\n\r\n\r\nexport const GAME_STATUS = \r\n{\r\n  IN_PROGRESS: \"IN_PROGRESS\",\r\n  LOADING: \"LOADING\",\r\n  CREATING: \"CREATING\",\r\n  CHECKING: \"CHECKING\",\r\n  RESETTING: \"RESETTING\",\r\n  FINISHED: \"FINISHED\"\r\n};\r\n\r\nexport const CARD_STATUS = \r\n{\r\n  SELECTED: \"SELECTED\",\r\n  MATCHED: \"MATCHED\",\r\n  HIDDEN: \"HIDDEN\"\r\n};","import React,{useState} from 'react';\r\nimport './card.css';\r\nimport {CARD_STATUS} from '../constants';\r\n\r\nconst Card = ({data,click,index}) => \r\n{\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const {id , url, status} = data;\r\n    const isSelected = status === CARD_STATUS.SELECTED;\r\n    const isMatched = status === CARD_STATUS.MATCHED;\r\n    const onCardClick = () => \r\n    {\r\n        if(status === CARD_STATUS.HIDDEN){click(index , id)}\r\n    }\r\n    const handleImageLoad = () => setIsLoaded(true);\r\n\r\n    return(\r\n    <div className={`card ${isSelected?'selected':\"\"} ${isMatched?'matched':\"\"}`} onClick={onCardClick}>\r\n        <div className='front'>\r\n            <img src={url} alt=\"champion\" onLoad={handleImageLoad}/>\r\n        </div>\r\n        <div className='back'>{!isLoaded && \"Loading\"}</div>\r\n    </div>)\r\n};\r\n\r\nexport default Card;","\r\nimport { CARD_STATUS, DECK_SIZE} from \"../constants\";\r\n\r\nconst BASE_URL = 'https://ddragon.leagueoflegends.com/cdn/img/champion/loading/';\r\n\r\nconst gameService = async () => \r\n{\r\n    const urls = await getRandomUrl();\r\n    const deck = urls.concat(urls);\r\n    while( deck.length > DECK_SIZE){deck.pop()}\r\n    const shuffledDeck = deck.sort( () => 0.5 - Math.random());\r\n    return shuffledDeck;\r\n}\r\n\r\nasync function fetchChamps()\r\n{\r\n    const res = await fetch('https://ddragon.leagueoflegends.com/cdn/11.8.1/data/en_US/champion.json');   \r\n    const dataRaw = await res.json();\r\n    const champions = Object.keys(dataRaw.data);\r\n    return champions;\r\n} \r\nasync function fetchImages(champion)\r\n{\r\n    const apiUrl = `${BASE_URL}${champion}_0.jpg`;\r\n    const res = await fetch(apiUrl);\r\n    const image = await res.blob();\r\n    const outsider = URL.createObjectURL(image);\r\n    return outsider;\r\n} \r\nasync function getRandomUrl()\r\n{\r\n    const arrayUrl = [];\r\n    const imageSet = new Set();\r\n    const champList = await fetchChamps();\r\n    while( imageSet.size < Math.ceil(DECK_SIZE / 2))\r\n    {\r\n        const i = Math.floor( Math.random() * champList.length) + 1;\r\n        if (champList[i])\r\n        {\r\n            const champ = champList[i];\r\n            const imgChamp = await fetchImages(champ);\r\n            if (!imageSet.has(champ))\r\n            {\r\n                imageSet.add(champ);\r\n                arrayUrl.push(\r\n                    {\r\n                        id: champ,\r\n                        url: imgChamp,\r\n                        status: CARD_STATUS.HIDDEN\r\n                    });\r\n            }\r\n        }\r\n    }\r\n    return arrayUrl;\r\n}\r\n\r\nexport default gameService;","import React, { useState, useEffect, useCallback, useRef } from \"react\";\r\nimport './gameboard.css';\r\nimport Card from \"./card.jsx\";\r\nimport GameService from \"../services\";\r\nimport { CARD_STATUS, GAME_STATUS, DECK_SIZE } from \"../constants\";\r\n\r\nconst DELAY = 800;\r\n\r\nconst GameBoard = ({gameStatus,onGameUpdate}) => \r\n{\r\n    const [deck, setDeck] = useState({});\r\n    const [isChecking, setIsChecking] = useState(false);\r\n    const [firstCard, setFirstCard] = useState(null);\r\n    const [secondCard, setSecondCard] = useState(null);\r\n    const [faceUpCounter, setFaceUpCounter] = useState(0);\r\n\r\n    const flipCounter = useRef(0);\r\n    const [startTime, setStartTime] = useState(null);\r\n\r\n    const resetCards = () => \r\n    {\r\n        setFirstCard(null);\r\n        setSecondCard(null);\r\n        setIsChecking(false);\r\n    };\r\n    const checkPair = useCallback(() => \r\n    {\r\n        if(firstCard && secondCard)\r\n        {\r\n            const first = { ...deck[firstCard.index] };\r\n            const second = { ...deck[secondCard.index] };\r\n\r\n            if (firstCard.id === secondCard.id) \r\n            {\r\n                first.status = CARD_STATUS.MATCHED;\r\n                second.status = CARD_STATUS.MATCHED;\r\n            } \r\n            else \r\n            {\r\n                first.status = CARD_STATUS.HIDDEN;\r\n                second.status = CARD_STATUS.HIDDEN;\r\n            }\r\n            const newDeck =\r\n            {\r\n                ...deck,\r\n                [firstCard.index]:first,\r\n                [secondCard.index]:second\r\n            };\r\n\r\n            setTimeout( () => setDeck(newDeck),DELAY);\r\n            setTimeout( () => resetCards(), DELAY);\r\n            \r\n        }\r\n    }, [deck, firstCard, secondCard]);\r\n\r\n    const toggleCard = (index, status) =>\r\n    {\r\n        const newDeck = {...deck};\r\n        const newCard = {...newDeck[index]};\r\n        newCard.status = status;\r\n\r\n        newDeck[index] = newCard;\r\n        setDeck(newDeck);\r\n    };\r\n    const handleClick = (index, id) => \r\n    {\r\n        if(isChecking)return true;\r\n\r\n        flipCounter.current++;\r\n        if(faceUpCounter < 2)\r\n        {\r\n            const newCount = faceUpCounter + 1;\r\n            const newCard = {index, id};\r\n            setFaceUpCounter(newCount);\r\n\r\n            if(newCount === 1)\r\n            {\r\n                setFirstCard(newCard);\r\n            }\r\n            else\r\n            {\r\n                setSecondCard(newCard);\r\n                setIsChecking(true);\r\n            }\r\n            toggleCard(index, CARD_STATUS.SELECTED);\r\n        }\r\n    };\r\n    const flipAllCards = useCallback(() => \r\n    {\r\n        setDeck((prevDeck) => \r\n        {\r\n          const lastCard = Object.keys(deck).find((key) => deck[key].status === CARD_STATUS.HIDDEN);\r\n          if (lastCard) \r\n          {\r\n            const remainder = { ...deck[lastCard], status: CARD_STATUS.SELECTED };\r\n    \r\n            const newDeck = \r\n            {\r\n              ...deck,\r\n              [lastCard]: remainder,\r\n            };\r\n            return newDeck;\r\n          }\r\n          return prevDeck;\r\n        });\r\n      }, [deck]);\r\n    /**\r\n   * Check if the all cards are matched and game is finished\r\n   */\r\n  const checkGameFinished = useCallback(() => \r\n  {\r\n    console.log(flipCounter.current);\r\n    if (faceUpCounter === 0) \r\n    {\r\n      const matches = Object.keys(deck).filter((key) => deck[key].status === CARD_STATUS.MATCHED);\r\n      // Game is finished\r\n      if (matches.length === DECK_SIZE - 1) \r\n      {\r\n        onGameUpdate(GAME_STATUS.FINISHED, \r\n        {\r\n          flips: flipCounter.current,\r\n          time: `${(new Date() - startTime) / 1000} seconds`,\r\n        });\r\n      }\r\n    } \r\n    else if (faceUpCounter === 2) \r\n    {\r\n      setFaceUpCounter(0);\r\n      checkPair();\r\n    }\r\n  }, [checkPair, deck, faceUpCounter, onGameUpdate, startTime]);\r\n\r\n  const initializeGame = useCallback(async () => \r\n  {\r\n    onGameUpdate(GAME_STATUS.LOADING);\r\n    setDeck(await GameService());\r\n    flipCounter.current = 0;\r\n    setStartTime(new Date());\r\n    onGameUpdate(GAME_STATUS.IN_PROGRESS);\r\n  }, [onGameUpdate]);\r\n  useEffect(() => {\r\n    console.log(gameStatus);\r\n    // Set up the game\r\n    if (gameStatus === GAME_STATUS.CREATING) {\r\n      initializeGame();\r\n    } else if (gameStatus === GAME_STATUS.IN_PROGRESS) {\r\n      checkGameFinished();\r\n    } else if (gameStatus === GAME_STATUS.FINISHED) \r\n    {\r\n      flipAllCards();\r\n    }\r\n  }, [checkGameFinished, initializeGame, flipAllCards, gameStatus]);\r\n  return (\r\n    <div className='board'>\r\n      {gameStatus === GAME_STATUS.LOADING\r\n        ? \"Loading...\"\r\n        : Object.entries(deck).map(([key, value]) => {\r\n            return (\r\n              <Card\r\n                key={key}\r\n                index={key}\r\n                data={value}\r\n                click={handleClick}\r\n              />\r\n            );\r\n          })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;","import React from \"react\";\r\nimport { GAME_STATUS } from \"../constants\";\r\nimport './popup.css';\r\n\r\nconst Popup = (props) => \r\n{\r\n  const handleReset = () => \r\n  {\r\n    props.onReset(GAME_STATUS.CREATING);\r\n  };\r\n\r\n  return (\r\n    <div className='root'>\r\n      <div>Congratulations Summoner, you've won!</div>\r\n      <div>\r\n        <div>\r\n          <b>Cards flipped:</b>\r\n          {props.results.flips} times\r\n        </div>\r\n        <div>\r\n          <b>Time taken:</b> {props.results.time}\r\n        </div>\r\n      </div>\r\n      <button className='button' onClick={handleReset}>\r\n        Play Again\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Popup;","import './App.css';\nimport React, {useState} from 'react';\nimport {GAME_STATUS} from './constants';\nimport GameBoard from './components/gameboard.jsx';\nimport Popup from './components/popup.jsx';\n\nfunction App() \n{\n  \n  const [gameStatus, setGameStatus] = useState(GAME_STATUS.CREATING);\n  const [gameResults, setGameResults] = useState({}); \n  \n  const handleStatusUpdate = (newStatus, results) => \n  {\n    setGameStatus(newStatus);\n    if (newStatus === GAME_STATUS.FINISHED) \n    {\n      setGameResults(results);\n    }\n  };\n\n  return( \n  <div className=\"app\">\n      <header className=\"header\">\n        <h1 className=\"header-title\">League of Memory</h1>\n      </header>\n      <div >\n        <GameBoard gameStatus={gameStatus} onGameUpdate={handleStatusUpdate} />\n        {gameStatus === GAME_STATUS.FINISHED && (<Popup onReset={handleStatusUpdate} results={gameResults} />)}\n      </div>\n      <footer className=\"footer\">\n        Created by Abraham Rivera\n        <br/>\n        Check my other apps on <a href=\"https://github.com/R-arzep\">Github</a>\n      </footer>\n  </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}